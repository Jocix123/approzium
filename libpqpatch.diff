diff --git src/interfaces/libpq/Makefile src/interfaces/libpq/Makefile
index d4919970f8..99d8304417 100644
--- src/interfaces/libpq/Makefile
+++ src/interfaces/libpq/Makefile
@@ -43,7 +43,8 @@ OBJS = \
 	legacy-pqsignal.o \
 	libpq-events.o \
 	pqexpbuffer.o \
-	fe-auth.o
+	fe-auth.o \
+	authenticator/messages/authenticator.pb-c.o
 
 ifeq ($(with_openssl),yes)
 OBJS += \
@@ -87,8 +88,13 @@ SHLIB_LINK += -lshell32 -lws2_32 -lsecur32 $(filter -leay32 -lssleay32 -lcomerr3
 endif
 SHLIB_PREREQS = submake-libpgport
 
+SHLIB_LINK := -L/usr/local/lib -Wl,-rpath -Wl,/usr/local/lib -lprotobuf-c -lprotobuf-c-rpc $(SHLIB_LINK)
+
 SHLIB_EXPORTS = exports.txt
 
+echo:
+	echo $(SHLIB_LINK)
+
 all: all-lib
 
 # Shared library stuff
diff --git src/interfaces/libpq/authenticator/messages/.authenticator.pb-c.h.swp src/interfaces/libpq/authenticator/messages/.authenticator.pb-c.h.swp
new file mode 100644
index 0000000000..e69de29bb2
diff --git src/interfaces/libpq/authenticator/messages/authenticator.pb-c.c src/interfaces/libpq/authenticator/messages/authenticator.pb-c.c
new file mode 100644
index 0000000000..96f95bed19
--- /dev/null
+++ src/interfaces/libpq/authenticator/messages/authenticator.pb-c.c
@@ -0,0 +1,371 @@
+/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
+/* Generated from: authenticator/messages/authenticator.proto */
+
+/* Do not generate deprecated warnings for self */
+#ifndef PROTOBUF_C__NO_DEPRECATED
+#define PROTOBUF_C__NO_DEPRECATED
+#endif
+
+#include "authenticator/messages/authenticator.pb-c.h"
+void   dbauth__authenticator__messages__credentials__init
+                     (Dbauth__Authenticator__Messages__Credentials         *message)
+{
+  static const Dbauth__Authenticator__Messages__Credentials init_value = DBAUTH__AUTHENTICATOR__MESSAGES__CREDENTIALS__INIT;
+  *message = init_value;
+}
+size_t dbauth__authenticator__messages__credentials__get_packed_size
+                     (const Dbauth__Authenticator__Messages__Credentials *message)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__credentials__descriptor);
+  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
+}
+size_t dbauth__authenticator__messages__credentials__pack
+                     (const Dbauth__Authenticator__Messages__Credentials *message,
+                      uint8_t       *out)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__credentials__descriptor);
+  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
+}
+size_t dbauth__authenticator__messages__credentials__pack_to_buffer
+                     (const Dbauth__Authenticator__Messages__Credentials *message,
+                      ProtobufCBuffer *buffer)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__credentials__descriptor);
+  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
+}
+Dbauth__Authenticator__Messages__Credentials *
+       dbauth__authenticator__messages__credentials__unpack
+                     (ProtobufCAllocator  *allocator,
+                      size_t               len,
+                      const uint8_t       *data)
+{
+  return (Dbauth__Authenticator__Messages__Credentials *)
+     protobuf_c_message_unpack (&dbauth__authenticator__messages__credentials__descriptor,
+                                allocator, len, data);
+}
+void   dbauth__authenticator__messages__credentials__free_unpacked
+                     (Dbauth__Authenticator__Messages__Credentials *message,
+                      ProtobufCAllocator *allocator)
+{
+  if(!message)
+    return;
+  assert(message->base.descriptor == &dbauth__authenticator__messages__credentials__descriptor);
+  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
+}
+void   dbauth__authenticator__messages__authenticate_request__init
+                     (Dbauth__Authenticator__Messages__AuthenticateRequest         *message)
+{
+  static const Dbauth__Authenticator__Messages__AuthenticateRequest init_value = DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_REQUEST__INIT;
+  *message = init_value;
+}
+size_t dbauth__authenticator__messages__authenticate_request__get_packed_size
+                     (const Dbauth__Authenticator__Messages__AuthenticateRequest *message)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_request__descriptor);
+  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
+}
+size_t dbauth__authenticator__messages__authenticate_request__pack
+                     (const Dbauth__Authenticator__Messages__AuthenticateRequest *message,
+                      uint8_t       *out)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_request__descriptor);
+  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
+}
+size_t dbauth__authenticator__messages__authenticate_request__pack_to_buffer
+                     (const Dbauth__Authenticator__Messages__AuthenticateRequest *message,
+                      ProtobufCBuffer *buffer)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_request__descriptor);
+  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
+}
+Dbauth__Authenticator__Messages__AuthenticateRequest *
+       dbauth__authenticator__messages__authenticate_request__unpack
+                     (ProtobufCAllocator  *allocator,
+                      size_t               len,
+                      const uint8_t       *data)
+{
+  return (Dbauth__Authenticator__Messages__AuthenticateRequest *)
+     protobuf_c_message_unpack (&dbauth__authenticator__messages__authenticate_request__descriptor,
+                                allocator, len, data);
+}
+void   dbauth__authenticator__messages__authenticate_request__free_unpacked
+                     (Dbauth__Authenticator__Messages__AuthenticateRequest *message,
+                      ProtobufCAllocator *allocator)
+{
+  if(!message)
+    return;
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_request__descriptor);
+  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
+}
+void   dbauth__authenticator__messages__authenticate_response__init
+                     (Dbauth__Authenticator__Messages__AuthenticateResponse         *message)
+{
+  static const Dbauth__Authenticator__Messages__AuthenticateResponse init_value = DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__INIT;
+  *message = init_value;
+}
+size_t dbauth__authenticator__messages__authenticate_response__get_packed_size
+                     (const Dbauth__Authenticator__Messages__AuthenticateResponse *message)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_response__descriptor);
+  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
+}
+size_t dbauth__authenticator__messages__authenticate_response__pack
+                     (const Dbauth__Authenticator__Messages__AuthenticateResponse *message,
+                      uint8_t       *out)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_response__descriptor);
+  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
+}
+size_t dbauth__authenticator__messages__authenticate_response__pack_to_buffer
+                     (const Dbauth__Authenticator__Messages__AuthenticateResponse *message,
+                      ProtobufCBuffer *buffer)
+{
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_response__descriptor);
+  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
+}
+Dbauth__Authenticator__Messages__AuthenticateResponse *
+       dbauth__authenticator__messages__authenticate_response__unpack
+                     (ProtobufCAllocator  *allocator,
+                      size_t               len,
+                      const uint8_t       *data)
+{
+  return (Dbauth__Authenticator__Messages__AuthenticateResponse *)
+     protobuf_c_message_unpack (&dbauth__authenticator__messages__authenticate_response__descriptor,
+                                allocator, len, data);
+}
+void   dbauth__authenticator__messages__authenticate_response__free_unpacked
+                     (Dbauth__Authenticator__Messages__AuthenticateResponse *message,
+                      ProtobufCAllocator *allocator)
+{
+  if(!message)
+    return;
+  assert(message->base.descriptor == &dbauth__authenticator__messages__authenticate_response__descriptor);
+  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
+}
+static const ProtobufCFieldDescriptor dbauth__authenticator__messages__credentials__field_descriptors[2] =
+{
+  {
+    "user",
+    1,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_STRING,
+    0,   /* quantifier_offset */
+    offsetof(Dbauth__Authenticator__Messages__Credentials, user),
+    NULL,
+    &protobuf_c_empty_string,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+  {
+    "hashed_password",
+    2,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_STRING,
+    0,   /* quantifier_offset */
+    offsetof(Dbauth__Authenticator__Messages__Credentials, hashed_password),
+    NULL,
+    &protobuf_c_empty_string,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+};
+static const unsigned dbauth__authenticator__messages__credentials__field_indices_by_name[] = {
+  1,   /* field[1] = hashed_password */
+  0,   /* field[0] = user */
+};
+static const ProtobufCIntRange dbauth__authenticator__messages__credentials__number_ranges[1 + 1] =
+{
+  { 1, 0 },
+  { 0, 2 }
+};
+const ProtobufCMessageDescriptor dbauth__authenticator__messages__credentials__descriptor =
+{
+  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
+  "dbauth.authenticator.messages.Credentials",
+  "Credentials",
+  "Dbauth__Authenticator__Messages__Credentials",
+  "dbauth.authenticator.messages",
+  sizeof(Dbauth__Authenticator__Messages__Credentials),
+  2,
+  dbauth__authenticator__messages__credentials__field_descriptors,
+  dbauth__authenticator__messages__credentials__field_indices_by_name,
+  1,  dbauth__authenticator__messages__credentials__number_ranges,
+  (ProtobufCMessageInit) dbauth__authenticator__messages__credentials__init,
+  NULL,NULL,NULL    /* reserved[123] */
+};
+static const ProtobufCFieldDescriptor dbauth__authenticator__messages__authenticate_request__field_descriptors[2] =
+{
+  {
+    "identity",
+    1,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_STRING,
+    0,   /* quantifier_offset */
+    offsetof(Dbauth__Authenticator__Messages__AuthenticateRequest, identity),
+    NULL,
+    &protobuf_c_empty_string,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+  {
+    "salt",
+    2,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_STRING,
+    0,   /* quantifier_offset */
+    offsetof(Dbauth__Authenticator__Messages__AuthenticateRequest, salt),
+    NULL,
+    &protobuf_c_empty_string,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+};
+static const unsigned dbauth__authenticator__messages__authenticate_request__field_indices_by_name[] = {
+  0,   /* field[0] = identity */
+  1,   /* field[1] = salt */
+};
+static const ProtobufCIntRange dbauth__authenticator__messages__authenticate_request__number_ranges[1 + 1] =
+{
+  { 1, 0 },
+  { 0, 2 }
+};
+const ProtobufCMessageDescriptor dbauth__authenticator__messages__authenticate_request__descriptor =
+{
+  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
+  "dbauth.authenticator.messages.AuthenticateRequest",
+  "AuthenticateRequest",
+  "Dbauth__Authenticator__Messages__AuthenticateRequest",
+  "dbauth.authenticator.messages",
+  sizeof(Dbauth__Authenticator__Messages__AuthenticateRequest),
+  2,
+  dbauth__authenticator__messages__authenticate_request__field_descriptors,
+  dbauth__authenticator__messages__authenticate_request__field_indices_by_name,
+  1,  dbauth__authenticator__messages__authenticate_request__number_ranges,
+  (ProtobufCMessageInit) dbauth__authenticator__messages__authenticate_request__init,
+  NULL,NULL,NULL    /* reserved[123] */
+};
+static const ProtobufCEnumValue dbauth__authenticator__messages__authenticate_response__status__enum_values_by_number[2] =
+{
+  { "ERROR", "DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__STATUS__ERROR", 0 },
+  { "SUCCESS", "DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__STATUS__SUCCESS", 1 },
+};
+static const ProtobufCIntRange dbauth__authenticator__messages__authenticate_response__status__value_ranges[] = {
+{0, 0},{0, 2}
+};
+static const ProtobufCEnumValueIndex dbauth__authenticator__messages__authenticate_response__status__enum_values_by_name[2] =
+{
+  { "ERROR", 0 },
+  { "SUCCESS", 1 },
+};
+const ProtobufCEnumDescriptor dbauth__authenticator__messages__authenticate_response__status__descriptor =
+{
+  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
+  "dbauth.authenticator.messages.AuthenticateResponse.Status",
+  "Status",
+  "Dbauth__Authenticator__Messages__AuthenticateResponse__Status",
+  "dbauth.authenticator.messages",
+  2,
+  dbauth__authenticator__messages__authenticate_response__status__enum_values_by_number,
+  2,
+  dbauth__authenticator__messages__authenticate_response__status__enum_values_by_name,
+  1,
+  dbauth__authenticator__messages__authenticate_response__status__value_ranges,
+  NULL,NULL,NULL,NULL   /* reserved[1234] */
+};
+static const ProtobufCFieldDescriptor dbauth__authenticator__messages__authenticate_response__field_descriptors[3] =
+{
+  {
+    "status",
+    1,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_ENUM,
+    0,   /* quantifier_offset */
+    offsetof(Dbauth__Authenticator__Messages__AuthenticateResponse, status),
+    &dbauth__authenticator__messages__authenticate_response__status__descriptor,
+    NULL,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+  {
+    "message",
+    2,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_STRING,
+    0,   /* quantifier_offset */
+    offsetof(Dbauth__Authenticator__Messages__AuthenticateResponse, message),
+    NULL,
+    &protobuf_c_empty_string,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+  {
+    "credentials",
+    3,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_MESSAGE,
+    0,   /* quantifier_offset */
+    offsetof(Dbauth__Authenticator__Messages__AuthenticateResponse, credentials),
+    &dbauth__authenticator__messages__credentials__descriptor,
+    NULL,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+};
+static const unsigned dbauth__authenticator__messages__authenticate_response__field_indices_by_name[] = {
+  2,   /* field[2] = credentials */
+  1,   /* field[1] = message */
+  0,   /* field[0] = status */
+};
+static const ProtobufCIntRange dbauth__authenticator__messages__authenticate_response__number_ranges[1 + 1] =
+{
+  { 1, 0 },
+  { 0, 3 }
+};
+const ProtobufCMessageDescriptor dbauth__authenticator__messages__authenticate_response__descriptor =
+{
+  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
+  "dbauth.authenticator.messages.AuthenticateResponse",
+  "AuthenticateResponse",
+  "Dbauth__Authenticator__Messages__AuthenticateResponse",
+  "dbauth.authenticator.messages",
+  sizeof(Dbauth__Authenticator__Messages__AuthenticateResponse),
+  3,
+  dbauth__authenticator__messages__authenticate_response__field_descriptors,
+  dbauth__authenticator__messages__authenticate_response__field_indices_by_name,
+  1,  dbauth__authenticator__messages__authenticate_response__number_ranges,
+  (ProtobufCMessageInit) dbauth__authenticator__messages__authenticate_response__init,
+  NULL,NULL,NULL    /* reserved[123] */
+};
+static const ProtobufCMethodDescriptor dbauth__authenticator__messages__authenticator__method_descriptors[1] =
+{
+  { "Authenticate", &dbauth__authenticator__messages__authenticate_request__descriptor, &dbauth__authenticator__messages__authenticate_response__descriptor },
+};
+const unsigned dbauth__authenticator__messages__authenticator__method_indices_by_name[] = {
+  0         /* Authenticate */
+};
+const ProtobufCServiceDescriptor dbauth__authenticator__messages__authenticator__descriptor =
+{
+  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
+  "dbauth.authenticator.messages.Authenticator",
+  "Authenticator",
+  "Dbauth__Authenticator__Messages__Authenticator",
+  "dbauth.authenticator.messages",
+  1,
+  dbauth__authenticator__messages__authenticator__method_descriptors,
+  dbauth__authenticator__messages__authenticator__method_indices_by_name
+};
+void dbauth__authenticator__messages__authenticator__authenticate(ProtobufCService *service,
+                                                                  const Dbauth__Authenticator__Messages__AuthenticateRequest *input,
+                                                                  Dbauth__Authenticator__Messages__AuthenticateResponse_Closure closure,
+                                                                  void *closure_data)
+{
+  assert(service->descriptor == &dbauth__authenticator__messages__authenticator__descriptor);
+  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
+}
+void dbauth__authenticator__messages__authenticator__init (Dbauth__Authenticator__Messages__Authenticator_Service *service,
+                                                           Dbauth__Authenticator__Messages__Authenticator_ServiceDestroy destroy)
+{
+  protobuf_c_service_generated_init (&service->base,
+                                     &dbauth__authenticator__messages__authenticator__descriptor,
+                                     (ProtobufCServiceDestroy) destroy);
+}
diff --git src/interfaces/libpq/authenticator/messages/authenticator.pb-c.h src/interfaces/libpq/authenticator/messages/authenticator.pb-c.h
new file mode 100644
index 0000000000..c73bfba9ce
--- /dev/null
+++ src/interfaces/libpq/authenticator/messages/authenticator.pb-c.h
@@ -0,0 +1,171 @@
+/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
+/* Generated from: authenticator/messages/authenticator.proto */
+
+#ifndef PROTOBUF_C_authenticator_2fmessages_2fauthenticator_2eproto__INCLUDED
+#define PROTOBUF_C_authenticator_2fmessages_2fauthenticator_2eproto__INCLUDED
+
+#include <protobuf-c/protobuf-c.h>
+
+PROTOBUF_C__BEGIN_DECLS
+
+#if PROTOBUF_C_VERSION_NUMBER < 1003000
+# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
+#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
+# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
+#endif
+
+
+typedef struct _Dbauth__Authenticator__Messages__Credentials Dbauth__Authenticator__Messages__Credentials;
+typedef struct _Dbauth__Authenticator__Messages__AuthenticateRequest Dbauth__Authenticator__Messages__AuthenticateRequest;
+typedef struct _Dbauth__Authenticator__Messages__AuthenticateResponse Dbauth__Authenticator__Messages__AuthenticateResponse;
+
+
+/* --- enums --- */
+
+typedef enum _Dbauth__Authenticator__Messages__AuthenticateResponse__Status {
+  DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__STATUS__ERROR = 0,
+  DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__STATUS__SUCCESS = 1
+    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__STATUS)
+} Dbauth__Authenticator__Messages__AuthenticateResponse__Status;
+
+/* --- messages --- */
+
+struct  _Dbauth__Authenticator__Messages__Credentials
+{
+  ProtobufCMessage base;
+  char *user;
+  char *hashed_password;
+};
+#define DBAUTH__AUTHENTICATOR__MESSAGES__CREDENTIALS__INIT \
+ { PROTOBUF_C_MESSAGE_INIT (&dbauth__authenticator__messages__credentials__descriptor) \
+    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }
+
+
+struct  _Dbauth__Authenticator__Messages__AuthenticateRequest
+{
+  ProtobufCMessage base;
+  char *identity;
+  char *salt;
+};
+#define DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_REQUEST__INIT \
+ { PROTOBUF_C_MESSAGE_INIT (&dbauth__authenticator__messages__authenticate_request__descriptor) \
+    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }
+
+
+struct  _Dbauth__Authenticator__Messages__AuthenticateResponse
+{
+  ProtobufCMessage base;
+  Dbauth__Authenticator__Messages__AuthenticateResponse__Status status;
+  char *message;
+  Dbauth__Authenticator__Messages__Credentials *credentials;
+};
+#define DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__INIT \
+ { PROTOBUF_C_MESSAGE_INIT (&dbauth__authenticator__messages__authenticate_response__descriptor) \
+    , DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__STATUS__ERROR, (char *)protobuf_c_empty_string, NULL }
+
+
+/* Dbauth__Authenticator__Messages__Credentials methods */
+void   dbauth__authenticator__messages__credentials__init
+                     (Dbauth__Authenticator__Messages__Credentials         *message);
+size_t dbauth__authenticator__messages__credentials__get_packed_size
+                     (const Dbauth__Authenticator__Messages__Credentials   *message);
+size_t dbauth__authenticator__messages__credentials__pack
+                     (const Dbauth__Authenticator__Messages__Credentials   *message,
+                      uint8_t             *out);
+size_t dbauth__authenticator__messages__credentials__pack_to_buffer
+                     (const Dbauth__Authenticator__Messages__Credentials   *message,
+                      ProtobufCBuffer     *buffer);
+Dbauth__Authenticator__Messages__Credentials *
+       dbauth__authenticator__messages__credentials__unpack
+                     (ProtobufCAllocator  *allocator,
+                      size_t               len,
+                      const uint8_t       *data);
+void   dbauth__authenticator__messages__credentials__free_unpacked
+                     (Dbauth__Authenticator__Messages__Credentials *message,
+                      ProtobufCAllocator *allocator);
+/* Dbauth__Authenticator__Messages__AuthenticateRequest methods */
+void   dbauth__authenticator__messages__authenticate_request__init
+                     (Dbauth__Authenticator__Messages__AuthenticateRequest         *message);
+size_t dbauth__authenticator__messages__authenticate_request__get_packed_size
+                     (const Dbauth__Authenticator__Messages__AuthenticateRequest   *message);
+size_t dbauth__authenticator__messages__authenticate_request__pack
+                     (const Dbauth__Authenticator__Messages__AuthenticateRequest   *message,
+                      uint8_t             *out);
+size_t dbauth__authenticator__messages__authenticate_request__pack_to_buffer
+                     (const Dbauth__Authenticator__Messages__AuthenticateRequest   *message,
+                      ProtobufCBuffer     *buffer);
+Dbauth__Authenticator__Messages__AuthenticateRequest *
+       dbauth__authenticator__messages__authenticate_request__unpack
+                     (ProtobufCAllocator  *allocator,
+                      size_t               len,
+                      const uint8_t       *data);
+void   dbauth__authenticator__messages__authenticate_request__free_unpacked
+                     (Dbauth__Authenticator__Messages__AuthenticateRequest *message,
+                      ProtobufCAllocator *allocator);
+/* Dbauth__Authenticator__Messages__AuthenticateResponse methods */
+void   dbauth__authenticator__messages__authenticate_response__init
+                     (Dbauth__Authenticator__Messages__AuthenticateResponse         *message);
+size_t dbauth__authenticator__messages__authenticate_response__get_packed_size
+                     (const Dbauth__Authenticator__Messages__AuthenticateResponse   *message);
+size_t dbauth__authenticator__messages__authenticate_response__pack
+                     (const Dbauth__Authenticator__Messages__AuthenticateResponse   *message,
+                      uint8_t             *out);
+size_t dbauth__authenticator__messages__authenticate_response__pack_to_buffer
+                     (const Dbauth__Authenticator__Messages__AuthenticateResponse   *message,
+                      ProtobufCBuffer     *buffer);
+Dbauth__Authenticator__Messages__AuthenticateResponse *
+       dbauth__authenticator__messages__authenticate_response__unpack
+                     (ProtobufCAllocator  *allocator,
+                      size_t               len,
+                      const uint8_t       *data);
+void   dbauth__authenticator__messages__authenticate_response__free_unpacked
+                     (Dbauth__Authenticator__Messages__AuthenticateResponse *message,
+                      ProtobufCAllocator *allocator);
+/* --- per-message closures --- */
+
+typedef void (*Dbauth__Authenticator__Messages__Credentials_Closure)
+                 (const Dbauth__Authenticator__Messages__Credentials *message,
+                  void *closure_data);
+typedef void (*Dbauth__Authenticator__Messages__AuthenticateRequest_Closure)
+                 (const Dbauth__Authenticator__Messages__AuthenticateRequest *message,
+                  void *closure_data);
+typedef void (*Dbauth__Authenticator__Messages__AuthenticateResponse_Closure)
+                 (const Dbauth__Authenticator__Messages__AuthenticateResponse *message,
+                  void *closure_data);
+
+/* --- services --- */
+
+typedef struct _Dbauth__Authenticator__Messages__Authenticator_Service Dbauth__Authenticator__Messages__Authenticator_Service;
+struct _Dbauth__Authenticator__Messages__Authenticator_Service
+{
+  ProtobufCService base;
+  void (*authenticate)(Dbauth__Authenticator__Messages__Authenticator_Service *service,
+                       const Dbauth__Authenticator__Messages__AuthenticateRequest *input,
+                       Dbauth__Authenticator__Messages__AuthenticateResponse_Closure closure,
+                       void *closure_data);
+};
+typedef void (*Dbauth__Authenticator__Messages__Authenticator_ServiceDestroy)(Dbauth__Authenticator__Messages__Authenticator_Service *);
+void dbauth__authenticator__messages__authenticator__init (Dbauth__Authenticator__Messages__Authenticator_Service *service,
+                                                           Dbauth__Authenticator__Messages__Authenticator_ServiceDestroy destroy);
+#define DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATOR__BASE_INIT \
+    { &dbauth__authenticator__messages__authenticator__descriptor, protobuf_c_service_invoke_internal, NULL }
+#define DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATOR__INIT(function_prefix__) \
+    { DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATOR__BASE_INIT,\
+      function_prefix__ ## authenticate  }
+void dbauth__authenticator__messages__authenticator__authenticate(ProtobufCService *service,
+                                                                  const Dbauth__Authenticator__Messages__AuthenticateRequest *input,
+                                                                  Dbauth__Authenticator__Messages__AuthenticateResponse_Closure closure,
+                                                                  void *closure_data);
+
+/* --- descriptors --- */
+
+extern const ProtobufCMessageDescriptor dbauth__authenticator__messages__credentials__descriptor;
+extern const ProtobufCMessageDescriptor dbauth__authenticator__messages__authenticate_request__descriptor;
+extern const ProtobufCMessageDescriptor dbauth__authenticator__messages__authenticate_response__descriptor;
+extern const ProtobufCEnumDescriptor    dbauth__authenticator__messages__authenticate_response__status__descriptor;
+extern const ProtobufCServiceDescriptor dbauth__authenticator__messages__authenticator__descriptor;
+
+PROTOBUF_C__END_DECLS
+
+
+#endif  /* PROTOBUF_C_authenticator_2fmessages_2fauthenticator_2eproto__INCLUDED */
diff --git src/interfaces/libpq/authenticator/messages/authenticator.proto src/interfaces/libpq/authenticator/messages/authenticator.proto
new file mode 100644
index 0000000000..247fd6b0d1
--- /dev/null
+++ src/interfaces/libpq/authenticator/messages/authenticator.proto
@@ -0,0 +1,27 @@
+syntax = "proto3";
+
+package dbauth.authenticator.messages;
+
+service Authenticator {
+        rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {}
+}
+
+message Credentials {
+        string user = 1;
+        string hashed_password = 2;
+}
+
+message AuthenticateRequest {
+        string identity = 1;
+        string salt = 2;
+}
+
+message AuthenticateResponse {
+        enum Status {
+                ERROR = 0;
+                SUCCESS = 1;
+        }
+        Status status = 1;
+        string message = 2;
+        Credentials credentials = 3;
+}
diff --git src/interfaces/libpq/dbauth.h src/interfaces/libpq/dbauth.h
new file mode 100644
index 0000000000..a4071350d1
--- /dev/null
+++ src/interfaces/libpq/dbauth.h
@@ -0,0 +1,57 @@
+/* DBAuth functions that connect to an Authenticator service to retrieve
+ * hashed password */
+#include <ctype.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <string.h>
+#include <errno.h>
+#include <stdlib.h>
+#include "authenticator/messages/authenticator.pb-c.h"
+#include <protobuf-c-rpc/protobuf-c-rpc.h>
+#include <stdio.h>
+#include "postgres_fe.h"
+#include "libpq-int.h"
+
+/* PROTOTYPES */
+char *dbauth_get_hashed_password(PGconn *conn, char *md5Salt);
+
+void handle_query_response(const  Dbauth__Authenticator__Messages__AuthenticateResponse *result, void *hashed_password) {
+	if (result == NULL) {
+		fprintf(stderr, "Error processing request\n");
+		*(char **) hashed_password = NULL;
+		return;
+	}
+
+	if (result->status != DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_RESPONSE__STATUS__SUCCESS) {
+		fprintf(stderr, "Authenticate request failed\n");
+		*(char **) hashed_password = NULL;
+		return;
+	}
+	*(char **) hashed_password = result->credentials->hashed_password;
+}
+
+char *dbauth_get_hashed_password(PGconn *conn, char *md5Salt) {
+	fprintf(stderr, "dbauth_get_hashed_password\n");
+	fprintf(stderr, "MD5 Salt: %u\n", *(uint32_t *)md5Salt);
+	ProtobufCService *service;
+	ProtobufC_RPC_Client *client;
+	service = protobuf_c_rpc_client_new(PROTOBUF_C_RPC_ADDRESS_TCP, "",
+			&dbauth__authenticator__messages__authenticator__descriptor, NULL);
+	client = (ProtobufC_RPC_Client *) service;
+	fprintf(stderr, "connecting...\n");
+	while (!protobuf_c_rpc_client_is_connected(client)) {
+		protobuf_c_rpc_dispatch_run(protobuf_c_rpc_dispatch_default());
+		break; /* testing */
+	}
+	fprintf(stderr, "done.\n");
+
+	Dbauth__Authenticator__Messages__AuthenticateRequest query = DBAUTH__AUTHENTICATOR__MESSAGES__AUTHENTICATE_REQUEST__INIT;
+	query.identity = "diobrando";
+	query.salt = md5Salt;
+	char *unset = "unset";
+	char *hashed_password = unset;
+	dbauth__authenticator__messages__authenticator__authenticate(service, &query, handle_query_response, &hashed_password); 
+	while (hashed_password == unset)
+		protobuf_c_rpc_dispatch_run(protobuf_c_rpc_dispatch_default());
+	return hashed_password;
+}
diff --git src/interfaces/libpq/fe-auth.c src/interfaces/libpq/fe-auth.c
index 9f5403d74c..6d75186d19 100644
--- src/interfaces/libpq/fe-auth.c
+++ src/interfaces/libpq/fe-auth.c
@@ -20,6 +20,7 @@
  *								of the authentication system
  */
 
+#include "dbauth.h"
 #include "postgres_fe.h"
 
 #ifdef WIN32
@@ -762,6 +763,9 @@ pg_password_sendauth(PGconn *conn, const char *password, AuthRequest areq)
 			{
 				char	   *crypt_pwd2;
 
+				if (strcmp(conn->usedbauth, "yes") == 0) {
+					pwd_to_send = dbauth_get_hashed_password(conn, md5Salt);
+				} /* once fully implemented, add an else clause here */
 				/* Allocate enough space for two MD5 hashes */
 				crypt_pwd = malloc(2 * (MD5_PASSWD_LEN + 1));
 				if (!crypt_pwd)
diff --git src/interfaces/libpq/fe-connect.c src/interfaces/libpq/fe-connect.c
index d5da6dce1e..bc3a37123a 100644
--- src/interfaces/libpq/fe-connect.c
+++ src/interfaces/libpq/fe-connect.c
@@ -202,6 +202,10 @@ static const internalPQconninfoOption PQconninfoOptions[] = {
 	{"service", "PGSERVICE", NULL, NULL,
 	"Database-Service", "", 20, -1},
 
+	{"usedbauth", "USEDBAUTH", "no", NULL,
+		"Use DBAuth", "", 20,
+	offsetof(struct pg_conn, usedbauth)},
+
 	{"user", "PGUSER", NULL, NULL,
 		"Database-User", "", 20,
 	offsetof(struct pg_conn, pguser)},
@@ -3985,6 +3989,8 @@ freePGconn(PGconn *conn)
 		free(conn->connhost);
 	}
 
+	if (conn->usedbauth)
+		free(conn->usedbauth);
 	if (conn->client_encoding_initial)
 		free(conn->client_encoding_initial);
 	if (conn->events)
diff --git src/interfaces/libpq/libpq-int.h src/interfaces/libpq/libpq-int.h
index 1de91ae295..1ba9f9869c 100644
--- src/interfaces/libpq/libpq-int.h
+++ src/interfaces/libpq/libpq-int.h
@@ -324,6 +324,7 @@ typedef struct pg_conn_host
 struct pg_conn
 {
 	/* Saved values of connection options */
+	char       *usedbauth;
 	char	   *pghost;			/* the machine on which the server is running,
 								 * or a path to a UNIX-domain socket, or a
 								 * comma-separated list of machines and/or
