// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: authenticator.proto

#include "authenticator.pb.h"
#include "authenticator.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dbauth {
namespace authenticator {
namespace messages {

static const char* Authenticator_method_names[] = {
  "/dbauth.authenticator.messages.Authenticator/Authenticate",
};

std::unique_ptr< Authenticator::Stub> Authenticator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Authenticator::Stub> stub(new Authenticator::Stub(channel));
  return stub;
}

Authenticator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Authenticate_(Authenticator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Authenticator::Stub::Authenticate(::grpc::ClientContext* context, const ::dbauth::authenticator::messages::AuthenticateRequest& request, ::dbauth::authenticator::messages::AuthenticateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::dbauth::authenticator::messages::AuthenticateResponse>* Authenticator::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::dbauth::authenticator::messages::AuthenticateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dbauth::authenticator::messages::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbauth::authenticator::messages::AuthenticateResponse>* Authenticator::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::dbauth::authenticator::messages::AuthenticateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dbauth::authenticator::messages::AuthenticateResponse>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, request, false);
}

Authenticator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Authenticator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Authenticator::Service, ::dbauth::authenticator::messages::AuthenticateRequest, ::dbauth::authenticator::messages::AuthenticateResponse>(
          std::mem_fn(&Authenticator::Service::Authenticate), this)));
}

Authenticator::Service::~Service() {
}

::grpc::Status Authenticator::Service::Authenticate(::grpc::ServerContext* context, const ::dbauth::authenticator::messages::AuthenticateRequest* request, ::dbauth::authenticator::messages::AuthenticateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dbauth
}  // namespace authenticator
}  // namespace messages

